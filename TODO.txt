To-do list for plagcheck.py


FUNCTION

Find cause of unittest fail of prune_matches(). It is so small!
Build the find_in_essay(), returning positional tuples to pass to prune_matches().
Build the add_paragraph(), taking output from prune_matches().
Add second level of find_in_essay(), replacing all \\W+ with \\W+w? to allow inserted words. This would have to integrate with both prune_matches() and add_paragraph().
Incorporate a sensitivity level.
remove sources from prepared text. This could be remove all '(....... \d\d\d\d)', or 'Camel Case (\d\d\d\d)'
adapt file_picker()  to GUI.  # DONE
continue reworking of find_matches()  # DONE
adapt get_texts() to return the new required objects.  # DONE
adapt get_texts() to work with new output from filepicker.  # DONE
encase all in a docx-in docx-out loop. See save_by_para.py.
encase all in a loop-though-several-essays loop.


USEABILITY

Improve filepicker to point-and-click GUI.  # DONE
Process multiple essays.
Package for colleagues to use on MS Windows.

PROBLEMS

repeated words as in "although thethe argument"
  Possible solutions:
    1. when the span is only one word, it can be found anywhere in the essay, so a 'sensitivity=3words' clause would help.
    2. find_in_sa() should have a start (and end?) position for re.search().

Letters within longer words are underlined: e.g. 'to' in 'accustomed'. Solution as above.

References are highlighted (smaller problem)
  Solutions:
    1. Have a re.group within find_in_sa(), which compares with a regex from of a citation and rejects matches. This could also be used for bibliographies and runs like 'in the same' or 'it would seem that'. The senstivity/number of words could be checked here too.
    2. Strip sa of references and bibliography before making para_words list. This would deal with bibliographies and title pages, too, but not empy phrases ('it would seem that' etc) or number of words.
